% This is an example script that shows how to create a basic simulation
% using the cardiovascular mathematical model and plot some basic results.

clear

%% Setup amici toolbox and make sure the simulation and model scripts are accessable
addpath(genpath(['.' filesep]))
run(['.' filesep 'Requirements' filesep 'AMICI-0.10.11_SS_eventFix' filesep 'matlab' filesep 'installAMICI.m'])
run(['.' filesep 'Requirements' filesep 'MEIGO' filesep 'install_MEIGO.m'])

%% Set parameter values and parameter names
paramNames = {'Cpvc' 'Rpu' 'Rpv' 'Lpv' 'Rtot' 'Ctot' 'ElCo' 'Caa' 'Emax_LA' 'Emax_LV' 'Emin_LA' 'Emin_LV' 'Lao' 'Lav'...
    'Lmv' 'Ppu' 'Rao' 'Rmv' 'k_diast_LA' 'k_diast_LV' 'k_syst_LA'...
    'k_syst_LV' 'm1_LA' 'm1_LV' 'm2_LA' 'm2_LV' 'onset_LA' 'onset_LV'};
constantsNames = {'aaCorr' 'avCorr' 'mvCorr' 'tdiast' 'Ks_LA' 'Ks_LV'...
    'V0_LA' 'V0_LV' 'RLAvisc' 'RLVvisc' 'Raa' 'Rpc' 'Rpvc' 'T' 'rho_blood' 'norm_factor_LA' 'norm_factor_LV'};

parameterValues = [4,0.01,0.002,0.0005,1.24,2.1,2.5758,0.10,0.17,3,0.08,0.08,0.0005,0.0004,0.0002,7.4,0.040,0.003751,0.18,0.452,0.11,0.269,1.32,1.32,13.1,27.4,0.15,1.501];
constants = [0,0,0,0.45,1.0e-08,4.0e-09,3,10,0.0001,0.0001,0.01,0.01,0.01,1,1.06,0.558,0.6093];
parameterValuesOriginal = parameterValues;

%% Set simulation settings
step = 0.001; % simulation time step
T = constants(strcmp('T',constantsNames));%length of cardiac cycle
simtime = 0:step:T; %time vector to be simulated (for each heartbeat)
options.x0 = [7.322,7.751,94.333,7.751,14.789,7.751,7.275,7.751,6.965,1,1]'; % initial conditions for the simulation

% set indexes needed in the simulation function simulate_avatarHEALTH
indexes.T = strcmp('T',constantsNames);
indexes.k_syst_LV = strcmp('k_syst_LV',paramNames);
indexes.k_syst_LA = strcmp('k_syst_LA',paramNames);
indexes.k_diast_LA = strcmp('k_diast_LA',paramNames);
indexes.k_diast_LV = strcmp('k_diast_LV',paramNames);
indexes.m1_LA = strcmp('m1_LA',paramNames);
indexes.m1_LV = strcmp('m1_LV',paramNames);
indexes.m2_LA = strcmp('m2_LA',paramNames);
indexes.m2_LV = strcmp('m2_LV',paramNames);
indexes.onset_LV = strcmp('onset_LV',paramNames);
indexes.onset_LA = strcmp('onset_LA',paramNames);

%% Simulate the model for one heartbeat (note: the model is not in steady state)
% Calculate normalizing factors for elastance function based on the parameters
constants(end) = calc_norm_factor(T,parameterValues(indexes.k_syst_LV),parameterValues(indexes.k_diast_LV),parameterValues(indexes.m1_LV),parameterValues(indexes.m2_LV));
constants(end-1) = calc_norm_factor(T,parameterValues(indexes.k_syst_LA),parameterValues(indexes.k_diast_LA),parameterValues(indexes.m1_LA),parameterValues(indexes.m2_LA));

%onset_LV: range set to 1-2 instead of -0.5 to 0.5 --> take onset_LV-1.5
parameterValues(indexes.onset_LV) = parameterValues(indexes.onset_LV) - 1.5;
%onset LA: adapted after onset LV to be close enough
parameterValues(indexes.onset_LA) = 1 + parameterValues(indexes.onset_LV) - parameterValues(indexes.onset_LA);

% set simulation time - it cannot start at 0 so we set it to +T, and then
% remove it again after the simulation
simtime = simtime+T;
options.tstart = T;

% Do the model simulation 
% simulate_avatar_HEALTH_fast is generated by the AMICI toolbox by running GenerateModels.m in the folder Modelfiles.
simpleSimulation = simulate_avatar_HEALTH_fast(simtime,parameterValues, constants, [], options);
simpleSimulation.t = simpleSimulation.t-T; %remove the offset T again


%% Create a basic results plot of some of the model states and observables
%define the names in the model
ynames = {'P_Aortic','Pperipheral','pressGrad MV','P Dmv','mv open','P Dav','av open','pressgrad AV','Ela','Elv','Qcaa','Qpc','P pulmvein','Qpvc','qLA','qLV','pLA','pLV','aaCorr','avCorr','mvCorr','pvCorr','Vla','Vlv','P_Brachial'};
xnames = {'Ppvc','Qpv','Vla','Qmv','Vlv','Qav','Paa','Qaa','Ppc','mv_open','av_open'};

% create the plots
figure('Name','SimpleSimulationExample_notInSteadyState')
tiledlayout(2,2)
nexttile
plot(simpleSimulation.t,simpleSimulation.x(:,strcmp(xnames,'Qmv')),'k-','LineWidth',1.5)
title('Blood flow in the mitral valve')
xlabel('Time (ms)')
ylabel('Blood flow (ml/s')

nexttile
plot(simpleSimulation.t,simpleSimulation.x(:,strcmp(xnames,'Qav')),'k-','LineWidth',1.5)
title('Blood flow in the aortic valve')
xlabel('Time (ms)')
ylabel('Blood flow (ml/s')

nexttile
plot(simpleSimulation.t,simpleSimulation.x(:,strcmp(xnames,'Qpv')),'k-','LineWidth',1.5)
title('Blood flow in the pulmonary veins')
xlabel('Time (ms)')
ylabel('Blood flow (ml/s')

nexttile
plot(simpleSimulation.t,simpleSimulation.y(:,strcmp(ynames,'P_Aortic')),'k-','LineWidth',1.5)
title('Pressure in the aorta')
xlabel('Time (ms)')
ylabel('Blood pressure (mmHg')


%% Simulate the model for several heartbeats
% simulate_avatarHEALTH creates repeated simulations of one heartbeat and
% puts all the heartbeats simulations together (simAll) as well as sends out the
% last simulated heartbeat (simLast) (assumed to be at steady state).
% The heartbeat simulations are created with the basic simulation function
% simulate_avatar_HEALTH_fast that is generated by the AMICI toolbox
numHeartBeats = 20; %number of heartbeats to simulate
[simAll,simLast] = simulate_avatarHEALTH(parameterValuesOriginal,constants,options,numHeartBeats,indexes,simtime);

%% Create a basic results plot of some of the model states and observables for several heartbeats
%define the names in the model
ynames = {'P_Aortic','Pperipheral','pressGrad MV','P Dmv','mv open','P Dav','av open','pressgrad AV','Ela','Elv','Qcaa','Qpc','P pulmvein','Qpvc','qLA','qLV','pLA','pLV','aaCorr','avCorr','mvCorr','pvCorr','Vla','Vlv','P_Brachial'};
xnames = {'Ppvc','Qpv','Vla','Qmv','Vlv','Qav','Paa','Qaa','Ppc','mv_open','av_open'};

% create the plots
figure('Name','SimpleSimulationExample_severalheartbeats')
tiledlayout(2,2)
nexttile
hold on
plot(simAll.t,simAll.x(:,strcmp(xnames,'Qmv')),'k-','LineWidth',1.5)
plot(simLast.t+T*numHeartBeats,simLast.x(:,strcmp(xnames,'Qmv')),'r-','LineWidth',1.5)
title('Blood flow in the mitral valve')
xlabel('Time (ms)')
ylabel('Blood flow (ml/s')

nexttile
hold on
plot(simAll.t,simAll.x(:,strcmp(xnames,'Qav')),'k-','LineWidth',1.5)
plot(simLast.t+T*numHeartBeats,simLast.x(:,strcmp(xnames,'Qav')),'r-','LineWidth',1.5)
title('Blood flow in the aortic valve')
xlabel('Time (ms)')
ylabel('Blood flow (ml/s')

nexttile
hold on
plot(simAll.t,simAll.x(:,strcmp(xnames,'Qpv')),'k-','LineWidth',1.5)
plot(simLast.t+T*numHeartBeats,simLast.x(:,strcmp(xnames,'Qpv')),'r-','LineWidth',1.5)
title('Blood flow in the pulmonary veins')
xlabel('Time (ms)')
ylabel('Blood flow (ml/s')

nexttile
hold on
plot(simAll.t,simAll.y(:,strcmp(ynames,'P_Aortic')),'k-','LineWidth',1.5)
plot(simLast.t+T*numHeartBeats,simLast.y(:,strcmp(ynames,'P_Aortic')),'r-','LineWidth',1.5)
title('Pressure in the aorta')
xlabel('Time (ms)')
ylabel('Blood pressure (mmHg')

